---
title: A Sample Article Using `quarto-ieee` for IEEE Journal and Transactions
format:
  ieee-pdf:
    keep-tex: true  
  ieee-html: default
author:
  - id: dfolio
    name: David Folio
    affiliations:
      - name: INSA Centre Val de Loire
        department: Laboratoire Prisme
        city: Bourges
        country: France
        postal-code: 18800
      - name: Unknown affiliation
    orcid: 0000-0001-9430-6091
    email: david.folio@insa-cvl.fr
    url: https://dfolio.fr/
    membership: "Member, IEEE"
    attributes:
      corresponding: true
    #photo: david-folio.png
    #bio: |
    #  Use `IEEEbiography`  with figure as  option and
    #  the author name as the argument followed by the biography text.
  - name: John Doe
    affiliations: 
      - name: Anonymous University
    # bio: |
    #   Use `IEEEbiographynophoto` and the author name
    #   as the argument followed by the biography text.
    # note: "Template created June 23, 2023; revised `r format(Sys.Date(),format='%B %d, %Y')`."
abstract: |
  This document describes the most common article elements and how to use the 
  `quarto-ieee` class with Pandoc/Quarto-Markdown to produce files that are
  suitable for submission to IEEE journals.  
  `quarto-ieee` can produce conference, journal, and technical note (correspondence) 
  papers with a suitable choice of class options. 
  It intends to generate PDF and HTML outputs that closely mimick what IEEE would generate.
keywords: [IEEE, IEEEtran, journal, Quarto, Pandoc, template]
#funding: 
funding: 
  statement: "The `quarto-ieee` template is freely available under the MIT license on github: <https://github.com/dfolio/quarto-ieee>."
pageheader:
  left: Journal XXX, Month Year
  right: 'D. Folio:  A Sample Article Using quarto-ieee'
  
header-includes:
   - \usepackage[english]{babel}
   - \usepackage{bm,bbm}
   - \usepackage{mathrsfs}
   - \usepackage{siunitx}
   - \usepackage{graphicx}
   - \usepackage{url}
   - \usepackage[T1]{fontenc}
   - \usepackage{polski}
   - \usepackage{booktabs}
   - \usepackage{color}
   - \usepackage{xcolor}
   - \usepackage{amsmath}
   - \usepackage{multirow}
   - \usepackage{subcaption}
   - \captionsetup[subfigure]{labelformat=parens, justification=centering}
   - \usepackage{placeins}
   
bibliography: bibliography.bib
date: 2023-06-23
pdf: https://github.com/dfolio/quarto-ieee/blob/main/template.pdf
citation: 
  container-title: GitHUB
  page: 1-3
  type: software
  issued: 2023-06-23
  url: https://github.com/dfolio/quarto-ieee
  pdf-url: https://github.com/dfolio/quarto-ieee/template.pdf
  
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, cache=TRUE)

library(fitdistrplus)
library(ggplot2)
library(reshape2)
library(knitr)
library(pandoc)
library(gridExtra)
library(gtools)
library(stats4)
library(rmutil)
library(scales)
library(tidyr)
library(rmutil)
library(invgamma)
library(tidyverse)
library(RColorBrewer)
library(ggsci)
library(ggpubr)
library(patchwork)
library(dplyr)
library(kableExtra)
library(ggthemes)
library(latex2exp)
library(e1071)# kurtosis
library(viridis)
library(nortest)# AD

theme_set(theme_minimal() +
            theme(text=element_text(family="serif"),
                  legend.position = "bottom")
)

# External functions
source("./Code/gamma_sar_sample.R")
source("./Code/ebrahimi_estimator.R")
source("./Code/al_omari_1_estimator.R")
source("./Code/bootstrap_ebrahimi_estimator.R")
source("./Code/bootstrap_al_omari_1_estimator.R")

```



# How to Use Cache in Quarto{#sec-intro}

## Global Cache
First, we need to activate the cache globally for the entire document. This means that all chunks that are executed will be cached and will not be executed again unless there is a change in the code or dependencies.

    ```{{r setup, include=FALSE}}
    knitr::opts_chunk$set(echo = FALSE, 
                                  cache=TRUE)
    ```

##  Simple Plot Example with Global Cache
This chunk uses the global cache. After the first execution, the cached result will be used, so the plot won't be regenerated unless the code or data changes.


```{r}
#| echo: true 

set.seed(123)
data <- rnorm(1000)

plot(density(data), main = "plot")

```

## Cache in a Specific Chunk
This chunk caches the summary table calculation. The table will only be recalculated if the code or the data changes.

```{r}
#| cache: true
set.seed(123)
data <- rnorm(200)

plot(density(data), main = "plot", col = "red")

```

## Using if (!file.exists(...)) to Save Data

This chunk uses the if (!file.exists(...)) condition to avoid recalculating the data if the file already exists. If the file exists, it loads the saved data; otherwise, it runs the computation and saves the results to the file. This approach is useful for collaboration, where you can share the file and avoid recomputation on other machines.

```{r}
#| cache: false
#| echo: true
# This code will be displayed in the document

# Check if the data file exists and save the results

if (!file.exists("saved_data.Rdata")) {

  computed_data <- rnorm(1000)
  save(computed_data, file = "./Data/example_data.Rdata")
} else {
  
  # Load the saved data
  load("./Data/example_data.Rdata")
}

# 
head(computed_data)

```


## eval: false
```{r}
#| echo: true #
#| eval: false
# This chunk will display the code
# but will not execute it
set.seed(123)
data <- rnorm(1000)
plot(density(data), main = "plot")

```


# Other examples: Plot and table

In a famous paper, @BC64 introduced a family of transformations \dots

```{r}
#| label: fig-density0
#| fig-cap: Simulated data from a N(0,1) distribution.
#| fig-pos: "H"
set.seed(2022-12-20)
df <- tibble(x = rnorm(200))
df |>
  ggplot(aes(x=x)) +
  geom_density(bw = "sj") +
  geom_rug()
```


@fig-density0 shows a kernel density estimate of simulated data from a N(0,1) distribution. The sample variance is given by
$$
  s^2 = \frac{1}{n-1} \sum_{i=1}^n (x_i-\bar{x})^2 = `r round(sd(df$x), 2)`.
$$ {#eq-s2}
Note that @eq-s2 is an unbiased estimate of the variance, but it is not the maximum likelihood estimate [@Rice2007, p.269].

In table \ref{tab:time} we have ...
```{r Simulated_comparative_time, echo=FALSE, message=FALSE}
set.seed(1234567890, kind = "Mersenne-Twister")
R <- 100
mu <- 1
B <- 1

sample.size <- c( 25, 49)
L_values <- c( 8)

bootstrap_estimators <- list(
  "$\\widetilde{H}_{\\text{AO}}$" = bootstrap_al_omari_1_estimator
)
if (!file.exists("./Data/results_data_time1.Rdata")) {#Deactivate this line to regenerate the file
  set.seed(1234567890, kind = "Mersenne-Twister")
  
  all_TestStatistics <- list()
  execution_times <- list()
  
  for (estimator_name in names(bootstrap_estimators)) {
    TestStatistics <- list()
    
    for (L in L_values) {
      TestStat <- list()
      
      for (s in sample.size) {
        TestStat1 <- numeric(R)
        start_time <- Sys.time() # start time
        
        for (r in 1:R) {
          z <- gamma_sar_sample(L, mu, s)
          TestStat1[r] <- bootstrap_estimators[[estimator_name]](z, B) - (log(mean(z)) + (L - log(L) + lgamma(L) + (1 - L) * digamma(L)))
        }
        
        TestStatistics[[as.character(s)]] <- data.frame("SampleSize" = rep(s, R), "Test_Statistics" = TestStat1)
        
        end_time <- Sys.time() # end time
        execution_time <- end_time - start_time # total time
        execution_times[[paste(estimator_name, L, s)]] <- execution_time # save time
      }
      all_TestStatistics[[paste(estimator_name, L)]] <- TestStatistics
    }
  }
  
  save(all_TestStatistics, execution_times, file = "./Data/results_data_time1.Rdata")
}


```

```{r Table_statistic_time, echo=FALSE, message=FALSE, warning=FALSE, results='asis'}

load("./Data/results_data_time1.Rdata")

combined_results <- data.frame(Estimator = character(),
                               L = numeric(),
                               SampleSize = numeric(),
                               Mean = numeric(),
                               Time = numeric())


if (length(all_TestStatistics) > 0 & length(execution_times) > 0) {
  for (estimator_name in names(bootstrap_estimators)) {
    for (L in L_values) {
      for (sample_size in sample.size) {
        
        if (!is.null(all_TestStatistics[[paste(estimator_name, L)]][[as.character(sample_size)]]) &
            !is.null(execution_times[[paste(estimator_name, L, sample_size)]])) {
          mean_value <- mean(all_TestStatistics[[paste(estimator_name, L)]][[as.character(sample_size)]][["Test_Statistics"]])
          time_value <- execution_times[[paste(estimator_name, L, sample_size)]]
          combined_results <- rbind(combined_results, data.frame(Estimator = estimator_name,
                                                                 L = L,
                                                                 SampleSize = sample_size,
                                                                 Mean = mean_value,
                                                                 Time = time_value))
        }
      }
    }
  }
} else {
  # 
  print("No data.")
}

# time
combined_results$Time <- gsub(" secs", "", combined_results$Time)

# 
combined_results$Time <- sprintf("%.2f", as.numeric(combined_results$Time))

#  LaTeX notation
colnames(combined_results) <- c("\\textbf{Estimator}", "$\\bm{L}$", "$\\bm{n}$", "$S(\\bm{Z}; L)$", "\\textbf{ Time} (s)")
combined_results[] <- lapply(combined_results, function(x) {
  if (is.numeric(x)) {
    if (all(x %% 1 == 0)) {
      formatted_numbers <- sprintf("$%d$", x)
    } else {
      formatted_numbers <- ifelse(x < 0, sprintf("$%.5f$", x), sprintf("$\\phantom{-}%.5f$", x))
    }
    return(formatted_numbers)
  } else {
    return(x)
  }
})

#
table_result_combined <- knitr::kable(
  combined_results,
  caption = "Test accuracy and processing time for each bootstrap-improved estimator. ",
  format = "latex",
  booktabs = TRUE,
  align = "ccccccc",
  escape = FALSE,
  digits = 5,
  label = "time",
  centering = FALSE,
  table.envir = "table", position="H", linesep = "") %>%
  #row_spec(4,  extra_latex_after = "\\cline{3-5}")%>%
  #row_spec(12,  extra_latex_after = "\\cline{3-5}")%>%
  #row_spec(20,  extra_latex_after = "\\cline{3-5}")%>%
  #collapse_rows(latex_hline = "major", valign = "middle") %>%
  row_spec(0,  align = "c")%>%
  kable_styling(latex_options = "scale_down")%>%
  kable_styling( full_width = T)#%>%
  #kable_styling(latex_options = c("repeat_header"))

print(table_result_combined)
```





# Markdown basics {#sec-Markdown}
The reader can easily find many documentations on how to write using the (Pandoc/Quarto) Markdown syntax.
The `quarto-ieee` template relies mainly on the Markdown markup supported by Quarto @quarto-markdown, which is build based on Pandoc [@MacFarlane_Pandoc; @Allaire_Quarto_2022].
Below are some basic examples of usage of the Markdown markup (to save space, it is better to consult the original Quarto document `template.qmd`).




## Figures
An image with nonempty alt text will be rendered as a figure with a caption with Pandoc and Quarto.
Quarto includes a different features to simplify the use of figures and subfigures.
Here, it is recommended to use div block with `#fig-` label to embed your Figures.


:::{#fig-1}
![](fig1.png){width="30%"}

An example of figure.
:::


:::{#fig-2  layout-ncol=2}
![ ](fig1.png){#fig-2a}

![ ](fig1.png){#fig-2b}

An example with sub-figure.
:::


The figures is cross-referenced as @fig-2  and even the sub-figures as @fig-2b.

### Tables {#sec-tables}

Similarly, many kind of tables may be used with Pandoc and Quarto.
The latter also includes different features to simplify the table output.
To make tables cross-referenceable use a label with a `#tbl-` prefix. 
\
However, it is recommended to avoid using the commonly used single Markdown table known as a 'pipe table'. 
In fact, Pandoc Markdown uses the {{< latex >}} `longtable` package, which does not support the two-column mode, which is required for most `IEEEtran` journals.
`quarto-ieee` uses a hack to temporarily switch to one-column mode. 
However, this hack may break the page layout.
To overcome this issue, a basic way is to use code cells (as for @tbl-other).
Quarto is a multi-language and it uses  `Knitr` to execute `R` code and can execute  Python code blocks within Markdown.

::: {#tbl-panel layout-ncol=2}
| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: First Table {#tbl-first}

| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: Second Table {#tbl-second}

Main Caption 
:::

The Tables are cross-referenced as @tbl-panel for details, especially @tbl-second.
There is also @tbl-other.

```{r}
#| label: tbl-other
#| tbl-cap: "A table"
#| tbl.env: tabular
#| fig-pos: h

options(knitr.table.format = function() {if (knitr::is_latex_output()) 'latex' else 'pandoc'})
dt <- data.frame(Col1=c('A','B','C'),
                 Col2=c('D','E','F'),
                 Col3=c('G','H','I'))

knitr::kable(head(dt), booktabs = TRUE)
```

## Bibliography

IEEE journal should normally use IEEEtran[^bibtex] {{< bibtex >}} style.
Nevertheless, Pandoc and Quarto do support {{< bibtex >}} with natbib or biblatex. However, neither is officially recommended for normal IEEE use.
For this reason, `quarto-ieee` uses `citeproc` with the `ieee` CSL style sheet.

[^bibtex]: IEEEtran BibTeX  style support  page is: <http://www.michaelshell.org/tex/ieeetran/bibtex/>


# Conclusions
The conclusion goes here.

# Acknowledgment {-}



[]{.appendix options="An Appendix"}


Use `[]{.appendix options="An Appendix"}` markup if you have a single appendix.
`IEEEtran` state that to do not use `\section{}` anymore after `\appendix`.



::: {.content-visible when-format="pdf"}
# References {-}
:::



[^issues-1023]: ["_[longtable not compatible with 2-column LaTeX documents](https://github.com/jgm/pandoc/issues/1023>)_", 

[^issues-2275]: See the issue here <https://github.com/quarto-dev/quarto-cli/issues/2275>

[IEEEXplore<sup>®</sup>]: <https://ieeexplore.ieee.org/>
